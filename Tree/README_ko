본 폴더에는 다양한 트리 알고리즘이 있습니다.

1. 심층 우선 탐색 (DFS)
트리나 그래프를 검색할 때는 먼저 가장 깊은 노드로 검색하세요. 일반적으로 재귀적 또는 스택으로 구현됩니다. 트리에서 전위, 중간 및 후방 탐색에 사용됩니다.

2. BFS(폭 우선 탐색)
루트에서 시작하여 먼저 같은 깊이의 노드를 검색합니다. 대기열을 사용합니다. 트리 레벨 검색에 유용합니다.

3. 다이크스트라 알고리즘
트리 자체에는 사이클이 없고 고유한 경로만 있기 때문에 트리에서 가장 짧은 경로는 DFS/BFS로 충분합니다. 그러나 트리 가중치가 없는 그래프의 경우 Dijkstra를 사용합니다. 우선순위 큐를 사용하여 최단 거리를 계산합니다.

📌는 트리와 직접적으로 덜 관련이 있지만, 트리 구조 위에 가중치가 추가될 때 적용됩니다.

4. adjL(인접 목록)
각 노드에는 연결된 인접 노드 목록이 있습니다. 공간 효율적이며 트리에서 자주 사용됩니다.

5. adjM (인접 행렬)
노드가 2차원 배열로 연결되어 있는지 여부를 나타냅니다. 밀집 그래프에서 일반적으로 사용되는 공간 낭비입니다.

6. BST(바이너리 검색 트리)
정렬된 데이터를 저장하고 탐색하는 데 최적화된 트리

7. AVL
이진 검색 트리 균형 맞추기(삽입/삭제 후 균형 맞추기)


🧠 다른 유형의 트리 알고리즘

8. 트리 회로
전방, 중앙 및 후방 횡단(DFS 변형)

9. LCA(최소 공통 조상)
두 노드의 공통 조상 찾기(DFS + DP 또는 이진 리프팅)

10. 세그먼트 트리
구간 합계/최대 값 등을 빠르게 얻을 수 있는 트리 구조

11. 트리
문자열의 트리 구조 표현(접두사 검색 등을 위한 useful)

12. 레드-블랙 트리
이진 검색 트리 균형 맞추기(삽입/삭제 후 균형 맞추기)

