폴더에는 다양한 트리 알고리즘이 있습니다.

1. DFS (깊이 우선 탐색)
트리나 그래프 탐색 시 가장 깊이 있는 노드까지 먼저 탐색. 
보통 재귀나 스택으로 구현. 트리에서 전위, 중위, 후위 순회에 쓰임.

2. BFS (너비 우선 탐색)
루트에서 시작해 같은 깊이의 노드들을 먼저 탐색. 큐(queue)를 사용. 
트리의 레벨별 탐색에 유용.

3. Dijkstra 알고리즘
트리 자체엔 사이클이 없고 유일한 경로만 있으므로, 트리에서 최단 경로는 DFS/BFS로도 충분. 
하지만 트리가 아닌 가중치가 있는 그래프에서는 Dijkstra 사용. 우선순위 큐로 최단 거리 계산.

📌 트리와 직접적인 관련은 적지만, 트리 구조 위에 가중치가 추가된 경우 응용됨.

4. adjL (인접 리스트)
각 노드가 연결된 이웃 노드 리스트를 가짐. 공간 효율적, 트리에 자주 사용.

5. adjM (인접 행렬)
2차원 배열로 노드 간 연결 여부 표시. 공간 낭비 있음, 보통 밀집 그래프에서 사용.


🧠 그 외 트리 알고리즘 종류

6. 트리 순회
전위, 중위, 후위 순회 (DFS 변형)

7. LCA (최소 공통 조상)
두 노드의 공통 조상 찾기 (DFS + DP 또는 binary lifting)

8. 세그먼트 트리
구간 합/최댓값 등을 빠르게 구할 수 있는 트리 구조

9. 트라이(Trie)
문자열을 트리 구조로 표현한 것 (접두사 검색 등에 유용)

10. 이진 탐색 트리 (BST)
정렬된 데이터 저장 및 탐색에 최적화된 트리

11. AVL / Red-Black Tree
균형 이진 탐색 트리 (삽입/삭제 후 균형 유지)
